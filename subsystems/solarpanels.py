
from .IPowerSource import IPowerSource

class SolarPanels(IPowerSource):
    """
    Solar panels are a subsystem of the satellite. They generate electricity primarily for the purpose of charging batteries.
    The amount of power they generate, in terms of voltage, is defined by their angle of incidence with light from the sun as well as any obstacles in the way of that light.
    That might be the satellite itself, the Earth, or some other body.
    """

    efficiency = 0.17 # TODO: find the real number for our solar panels
    # This value is 17%, based on numbers from mid-tier commercial ground-based panels.

    sunIntensity = 1361.0 # watts per square meter. This is the solar constant.
    # The value of the solar constant is taken from Wikipedia.
    # The figure is based on NASA data from the 2008 solar minimum.
    # https://en.wikipedia.org/wiki/Solar_constant. Accessed 31 July 2023. 

    panelArea = 0.02 # TODO: find the real number for our solar panels.
    # This value is 20cm square by 10cm square, expressed in square meters.

    currentWattHours = 0.0
    totalGeneratedWattHours = 0.0

    def __init__(self):
        pass

    def update(self, deltaTimeSeconds: float = 1.0):
        self.currentWattHours = self.getCurrentGeneratedWatts() * (deltaTimeSeconds / 3600.0) # convert seconds to hours, multiply by watts generated
        self.totalGeneratedWattHours += self.currentWattHours

    def getCurrentGeneratedWatts(self) -> float:
        # amount of power hitting the solar panels assuming they're perpendicular to the light:
        # incidentPower = intensity * area

        # power actually generated by the solar panels:
        # generatedPower = incidentPower * efficiency

        # generatedPower = intensity * area * efficiency
        return self.sunIntensity * self.panelArea * self.efficiency
    
    def popGeneratedWattHours(self) -> float:
        output = self.currentWattHours
        self.currentWattHours = 0
        return output
    
    def getTotalGeneratedWattHours(self) -> float:
        return self.totalGeneratedWattHours